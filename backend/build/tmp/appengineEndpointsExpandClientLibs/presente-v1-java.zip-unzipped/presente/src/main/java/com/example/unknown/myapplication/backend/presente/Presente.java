/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/google/apis-client-generator/
 * (build: 2017-11-07 19:12:12 UTC)
 * on 2017-12-08 at 21:17:06 UTC 
 * Modify at your own risk.
 */

package com.example.unknown.myapplication.backend.presente;

/**
 * Service definition for Presente (v1).
 *
 * <p>
 * This is an API
 * </p>
 *
 * <p>
 * For more information about this service, see the
 * <a href="" target="_blank">API Documentation</a>
 * </p>
 *
 * <p>
 * This service uses {@link PresenteRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @since 1.3
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public class Presente extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

  // Note: Leave this static initializer at the top of the file.
  static {
    com.google.api.client.util.Preconditions.checkState(
        com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
        com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 15,
        "You are currently running with version %s of google-api-client. " +
        "You need at least version 1.15 of google-api-client to run version " +
        "1.23.0 of the presente library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
  }

  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_ROOT_URL = "https://groovy-works-180421.appspot.com/_ah/api/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_SERVICE_PATH = "presente/v1/";

  /**
   * The default encoded batch path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.23
   */
  public static final String DEFAULT_BATCH_PATH = "batch";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

  /**
   * Constructor.
   *
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport HTTP transport, which should normally be:
   *        <ul>
   *        <li>Google App Engine:
   *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
   *        <li>Android: {@code newCompatibleTransport} from
   *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
   *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
   *        </li>
   *        </ul>
   * @param jsonFactory JSON factory, which may be:
   *        <ul>
   *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
   *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
   *        <li>Android Honeycomb or higher:
   *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
   *        </ul>
   * @param httpRequestInitializer HTTP request initializer or {@code null} for none
   * @since 1.7
   */
  public Presente(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
      com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
    this(new Builder(transport, jsonFactory, httpRequestInitializer));
  }

  /**
   * @param builder builder
   */
  Presente(Builder builder) {
    super(builder);
  }

  @Override
  protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
    super.initialize(httpClientRequest);
  }

  /**
   * An accessor for creating requests from the Aulas collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Presente presente = new Presente(...);}
   *   {@code Presente.Aulas.List request = presente.aulas().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Aulas aulas() {
    return new Aulas();
  }

  /**
   * The "aulas" collection of methods.
   */
  public class Aulas {

    /**
     * Create a request for the method "aulas.create".
     *
     * This request holds the parameters needed by the presente server.  After setting any optional
     * parameters, call the {@link Create#execute()} method to invoke the remote operation.
     *
     * @param content the {@link com.example.unknown.myapplication.backend.presente.model.Aula}
     * @return the request
     */
    public Create create(com.example.unknown.myapplication.backend.presente.model.Aula content) throws java.io.IOException {
      Create result = new Create(content);
      initialize(result);
      return result;
    }

    public class Create extends PresenteRequest<com.example.unknown.myapplication.backend.presente.model.CollectionResponseAula> {

      private static final String REST_PATH = "aulas/create";

      /**
       * Create a request for the method "aulas.create".
       *
       * This request holds the parameters needed by the the presente server.  After setting any
       * optional parameters, call the {@link Create#execute()} method to invoke the remote operation.
       * <p> {@link
       * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param content the {@link com.example.unknown.myapplication.backend.presente.model.Aula}
       * @since 1.13
       */
      protected Create(com.example.unknown.myapplication.backend.presente.model.Aula content) {
        super(Presente.this, "POST", REST_PATH, content, com.example.unknown.myapplication.backend.presente.model.CollectionResponseAula.class);
      }

      @Override
      public Create setAlt(java.lang.String alt) {
        return (Create) super.setAlt(alt);
      }

      @Override
      public Create setFields(java.lang.String fields) {
        return (Create) super.setFields(fields);
      }

      @Override
      public Create setKey(java.lang.String key) {
        return (Create) super.setKey(key);
      }

      @Override
      public Create setOauthToken(java.lang.String oauthToken) {
        return (Create) super.setOauthToken(oauthToken);
      }

      @Override
      public Create setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Create) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Create setQuotaUser(java.lang.String quotaUser) {
        return (Create) super.setQuotaUser(quotaUser);
      }

      @Override
      public Create setUserIp(java.lang.String userIp) {
        return (Create) super.setUserIp(userIp);
      }

      @Override
      public Create set(String parameterName, Object value) {
        return (Create) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "aulas.finalizar".
     *
     * This request holds the parameters needed by the presente server.  After setting any optional
     * parameters, call the {@link Finalizar#execute()} method to invoke the remote operation.
     *
     * @param aula
     * @return the request
     */
    public Finalizar finalizar(java.lang.Long aula) throws java.io.IOException {
      Finalizar result = new Finalizar(aula);
      initialize(result);
      return result;
    }

    public class Finalizar extends PresenteRequest<com.example.unknown.myapplication.backend.presente.model.CollectionResponseAula> {

      private static final String REST_PATH = "aulas/finalizar";

      /**
       * Create a request for the method "aulas.finalizar".
       *
       * This request holds the parameters needed by the the presente server.  After setting any
       * optional parameters, call the {@link Finalizar#execute()} method to invoke the remote
       * operation. <p> {@link
       * Finalizar#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param aula
       * @since 1.13
       */
      protected Finalizar(java.lang.Long aula) {
        super(Presente.this, "POST", REST_PATH, null, com.example.unknown.myapplication.backend.presente.model.CollectionResponseAula.class);
        this.aula = com.google.api.client.util.Preconditions.checkNotNull(aula, "Required parameter aula must be specified.");
      }

      @Override
      public Finalizar setAlt(java.lang.String alt) {
        return (Finalizar) super.setAlt(alt);
      }

      @Override
      public Finalizar setFields(java.lang.String fields) {
        return (Finalizar) super.setFields(fields);
      }

      @Override
      public Finalizar setKey(java.lang.String key) {
        return (Finalizar) super.setKey(key);
      }

      @Override
      public Finalizar setOauthToken(java.lang.String oauthToken) {
        return (Finalizar) super.setOauthToken(oauthToken);
      }

      @Override
      public Finalizar setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Finalizar) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Finalizar setQuotaUser(java.lang.String quotaUser) {
        return (Finalizar) super.setQuotaUser(quotaUser);
      }

      @Override
      public Finalizar setUserIp(java.lang.String userIp) {
        return (Finalizar) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.Long aula;

      /**

       */
      public java.lang.Long getAula() {
        return aula;
      }

      public Finalizar setAula(java.lang.Long aula) {
        this.aula = aula;
        return this;
      }

      @Override
      public Finalizar set(String parameterName, Object value) {
        return (Finalizar) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "aulas.get".
     *
     * This request holds the parameters needed by the presente server.  After setting any optional
     * parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @param materia
     * @return the request
     */
    public Get get(java.lang.Long materia) throws java.io.IOException {
      Get result = new Get(materia);
      initialize(result);
      return result;
    }

    public class Get extends PresenteRequest<com.example.unknown.myapplication.backend.presente.model.CollectionResponseAula> {

      private static final String REST_PATH = "aulas/get";

      /**
       * Create a request for the method "aulas.get".
       *
       * This request holds the parameters needed by the the presente server.  After setting any
       * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
       * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param materia
       * @since 1.13
       */
      protected Get(java.lang.Long materia) {
        super(Presente.this, "GET", REST_PATH, null, com.example.unknown.myapplication.backend.presente.model.CollectionResponseAula.class);
        this.materia = com.google.api.client.util.Preconditions.checkNotNull(materia, "Required parameter materia must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Get setAlt(java.lang.String alt) {
        return (Get) super.setAlt(alt);
      }

      @Override
      public Get setFields(java.lang.String fields) {
        return (Get) super.setFields(fields);
      }

      @Override
      public Get setKey(java.lang.String key) {
        return (Get) super.setKey(key);
      }

      @Override
      public Get setOauthToken(java.lang.String oauthToken) {
        return (Get) super.setOauthToken(oauthToken);
      }

      @Override
      public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Get) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Get setQuotaUser(java.lang.String quotaUser) {
        return (Get) super.setQuotaUser(quotaUser);
      }

      @Override
      public Get setUserIp(java.lang.String userIp) {
        return (Get) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.Long materia;

      /**

       */
      public java.lang.Long getMateria() {
        return materia;
      }

      public Get setMateria(java.lang.Long materia) {
        this.materia = materia;
        return this;
      }

      @Override
      public Get set(String parameterName, Object value) {
        return (Get) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "aulas.list".
     *
     * This request holds the parameters needed by the presente server.  After setting any optional
     * parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @return the request
     */
    public List list() throws java.io.IOException {
      List result = new List();
      initialize(result);
      return result;
    }

    public class List extends PresenteRequest<com.example.unknown.myapplication.backend.presente.model.CollectionResponseAula> {

      private static final String REST_PATH = "aulas/list";

      /**
       * Create a request for the method "aulas.list".
       *
       * This request holds the parameters needed by the the presente server.  After setting any
       * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
       * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @since 1.13
       */
      protected List() {
        super(Presente.this, "GET", REST_PATH, null, com.example.unknown.myapplication.backend.presente.model.CollectionResponseAula.class);
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public List setAlt(java.lang.String alt) {
        return (List) super.setAlt(alt);
      }

      @Override
      public List setFields(java.lang.String fields) {
        return (List) super.setFields(fields);
      }

      @Override
      public List setKey(java.lang.String key) {
        return (List) super.setKey(key);
      }

      @Override
      public List setOauthToken(java.lang.String oauthToken) {
        return (List) super.setOauthToken(oauthToken);
      }

      @Override
      public List setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (List) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public List setQuotaUser(java.lang.String quotaUser) {
        return (List) super.setQuotaUser(quotaUser);
      }

      @Override
      public List setUserIp(java.lang.String userIp) {
        return (List) super.setUserIp(userIp);
      }

      @Override
      public List set(String parameterName, Object value) {
        return (List) super.set(parameterName, value);
      }
    }

    /**
     * An accessor for creating requests from the Materias collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code Presente presente = new Presente(...);}
     *   {@code Presente.Materias.List request = presente.materias().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public Materias materias() {
      return new Materias();
    }

    /**
     * The "materias" collection of methods.
     */
    public class Materias {

      /**
       * An accessor for creating requests from the Alunos collection.
       *
       * <p>The typical use is:</p>
       * <pre>
       *   {@code Presente presente = new Presente(...);}
       *   {@code Presente.Alunos.List request = presente.alunos().list(parameters ...)}
       * </pre>
       *
       * @return the resource collection
       */
      public Alunos alunos() {
        return new Alunos();
      }

      /**
       * The "alunos" collection of methods.
       */
      public class Alunos {

        /**
         * Create a request for the method "alunos.abertas".
         *
         * This request holds the parameters needed by the presente server.  After setting any optional
         * parameters, call the {@link Abertas#execute()} method to invoke the remote operation.
         *
         * @param aluno
         * @return the request
         */
        public Abertas abertas(java.lang.Long aluno) throws java.io.IOException {
          Abertas result = new Abertas(aluno);
          initialize(result);
          return result;
        }

        public class Abertas extends PresenteRequest<com.example.unknown.myapplication.backend.presente.model.CollectionResponseAula> {

          private static final String REST_PATH = "users/materias/alunos/abertas";

          /**
           * Create a request for the method "alunos.abertas".
           *
           * This request holds the parameters needed by the the presente server.  After setting any
           * optional parameters, call the {@link Abertas#execute()} method to invoke the remote operation.
           * <p> {@link
           * Abertas#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param aluno
           * @since 1.13
           */
          protected Abertas(java.lang.Long aluno) {
            super(Presente.this, "GET", REST_PATH, null, com.example.unknown.myapplication.backend.presente.model.CollectionResponseAula.class);
            this.aluno = com.google.api.client.util.Preconditions.checkNotNull(aluno, "Required parameter aluno must be specified.");
          }

          @Override
          public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
            return super.executeUsingHead();
          }

          @Override
          public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
            return super.buildHttpRequestUsingHead();
          }

          @Override
          public Abertas setAlt(java.lang.String alt) {
            return (Abertas) super.setAlt(alt);
          }

          @Override
          public Abertas setFields(java.lang.String fields) {
            return (Abertas) super.setFields(fields);
          }

          @Override
          public Abertas setKey(java.lang.String key) {
            return (Abertas) super.setKey(key);
          }

          @Override
          public Abertas setOauthToken(java.lang.String oauthToken) {
            return (Abertas) super.setOauthToken(oauthToken);
          }

          @Override
          public Abertas setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Abertas) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Abertas setQuotaUser(java.lang.String quotaUser) {
            return (Abertas) super.setQuotaUser(quotaUser);
          }

          @Override
          public Abertas setUserIp(java.lang.String userIp) {
            return (Abertas) super.setUserIp(userIp);
          }

          @com.google.api.client.util.Key
          private java.lang.Long aluno;

          /**

           */
          public java.lang.Long getAluno() {
            return aluno;
          }

          public Abertas setAluno(java.lang.Long aluno) {
            this.aluno = aluno;
            return this;
          }

          @Override
          public Abertas set(String parameterName, Object value) {
            return (Abertas) super.set(parameterName, value);
          }
        }

      }
    }
    /**
     * An accessor for creating requests from the User collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code Presente presente = new Presente(...);}
     *   {@code Presente.User.List request = presente.user().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public User user() {
      return new User();
    }

    /**
     * The "user" collection of methods.
     */
    public class User {

      /**
       * Create a request for the method "user.all".
       *
       * This request holds the parameters needed by the presente server.  After setting any optional
       * parameters, call the {@link All#execute()} method to invoke the remote operation.
       *
       * @param aula
       * @return the request
       */
      public All all(java.lang.Long aula) throws java.io.IOException {
        All result = new All(aula);
        initialize(result);
        return result;
      }

      public class All extends PresenteRequest<com.example.unknown.myapplication.backend.presente.model.CollectionResponseUser> {

        private static final String REST_PATH = "aulas/user/all";

        /**
         * Create a request for the method "user.all".
         *
         * This request holds the parameters needed by the the presente server.  After setting any
         * optional parameters, call the {@link All#execute()} method to invoke the remote operation. <p>
         * {@link All#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param aula
         * @since 1.13
         */
        protected All(java.lang.Long aula) {
          super(Presente.this, "GET", REST_PATH, null, com.example.unknown.myapplication.backend.presente.model.CollectionResponseUser.class);
          this.aula = com.google.api.client.util.Preconditions.checkNotNull(aula, "Required parameter aula must be specified.");
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public All setAlt(java.lang.String alt) {
          return (All) super.setAlt(alt);
        }

        @Override
        public All setFields(java.lang.String fields) {
          return (All) super.setFields(fields);
        }

        @Override
        public All setKey(java.lang.String key) {
          return (All) super.setKey(key);
        }

        @Override
        public All setOauthToken(java.lang.String oauthToken) {
          return (All) super.setOauthToken(oauthToken);
        }

        @Override
        public All setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (All) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public All setQuotaUser(java.lang.String quotaUser) {
          return (All) super.setQuotaUser(quotaUser);
        }

        @Override
        public All setUserIp(java.lang.String userIp) {
          return (All) super.setUserIp(userIp);
        }

        @com.google.api.client.util.Key
        private java.lang.Long aula;

        /**

         */
        public java.lang.Long getAula() {
          return aula;
        }

        public All setAula(java.lang.Long aula) {
          this.aula = aula;
          return this;
        }

        @Override
        public All set(String parameterName, Object value) {
          return (All) super.set(parameterName, value);
        }
      }
      /**
       * Create a request for the method "user.presente".
       *
       * This request holds the parameters needed by the presente server.  After setting any optional
       * parameters, call the {@link PresenteOperation#execute()} method to invoke the remote operation.
       *
       * @param aluno
       * @param aula
       * @return the request
       */
      public PresenteOperation presente(java.lang.Long aluno, java.lang.Long aula) throws java.io.IOException {
        PresenteOperation result = new PresenteOperation(aluno, aula);
        initialize(result);
        return result;
      }

      public class PresenteOperation extends PresenteRequest<com.example.unknown.myapplication.backend.presente.model.CollectionResponseAulaRelationUser> {

        private static final String REST_PATH = "aulas/user/presente";

        /**
         * Create a request for the method "user.presente".
         *
         * This request holds the parameters needed by the the presente server.  After setting any
         * optional parameters, call the {@link PresenteOperation#execute()} method to invoke the remote
         * operation. <p> {@link PresenteOperation#initialize(com.google.api.client.googleapis.services.Ab
         * stractGoogleClientRequest)} must be called to initialize this instance immediately after
         * invoking the constructor. </p>
         *
         * @param aluno
         * @param aula
         * @since 1.13
         */
        protected PresenteOperation(java.lang.Long aluno, java.lang.Long aula) {
          super(Presente.this, "POST", REST_PATH, null, com.example.unknown.myapplication.backend.presente.model.CollectionResponseAulaRelationUser.class);
          this.aluno = com.google.api.client.util.Preconditions.checkNotNull(aluno, "Required parameter aluno must be specified.");
          this.aula = com.google.api.client.util.Preconditions.checkNotNull(aula, "Required parameter aula must be specified.");
        }

        @Override
        public PresenteOperation setAlt(java.lang.String alt) {
          return (PresenteOperation) super.setAlt(alt);
        }

        @Override
        public PresenteOperation setFields(java.lang.String fields) {
          return (PresenteOperation) super.setFields(fields);
        }

        @Override
        public PresenteOperation setKey(java.lang.String key) {
          return (PresenteOperation) super.setKey(key);
        }

        @Override
        public PresenteOperation setOauthToken(java.lang.String oauthToken) {
          return (PresenteOperation) super.setOauthToken(oauthToken);
        }

        @Override
        public PresenteOperation setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (PresenteOperation) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public PresenteOperation setQuotaUser(java.lang.String quotaUser) {
          return (PresenteOperation) super.setQuotaUser(quotaUser);
        }

        @Override
        public PresenteOperation setUserIp(java.lang.String userIp) {
          return (PresenteOperation) super.setUserIp(userIp);
        }

        @com.google.api.client.util.Key
        private java.lang.Long aluno;

        /**

         */
        public java.lang.Long getAluno() {
          return aluno;
        }

        public PresenteOperation setAluno(java.lang.Long aluno) {
          this.aluno = aluno;
          return this;
        }

        @com.google.api.client.util.Key
        private java.lang.Long aula;

        /**

         */
        public java.lang.Long getAula() {
          return aula;
        }

        public PresenteOperation setAula(java.lang.Long aula) {
          this.aula = aula;
          return this;
        }

        @com.google.api.client.util.Key
        private java.lang.Boolean presente;

        /**

         */
        public java.lang.Boolean getPresente() {
          return presente;
        }

        public PresenteOperation setPresente(java.lang.Boolean presente) {
          this.presente = presente;
          return this;
        }

        @Override
        public PresenteOperation set(String parameterName, Object value) {
          return (PresenteOperation) super.set(parameterName, value);
        }
      }

    }
  }

  /**
   * An accessor for creating requests from the Materias collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Presente presente = new Presente(...);}
   *   {@code Presente.Materias.List request = presente.materias().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Materias materias() {
    return new Materias();
  }

  /**
   * The "materias" collection of methods.
   */
  public class Materias {

    /**
     * Create a request for the method "materias.create".
     *
     * This request holds the parameters needed by the presente server.  After setting any optional
     * parameters, call the {@link Create#execute()} method to invoke the remote operation.
     *
     * @param content the {@link com.example.unknown.myapplication.backend.presente.model.Materia}
     * @return the request
     */
    public Create create(com.example.unknown.myapplication.backend.presente.model.Materia content) throws java.io.IOException {
      Create result = new Create(content);
      initialize(result);
      return result;
    }

    public class Create extends PresenteRequest<Void> {

      private static final String REST_PATH = "materias/create";

      /**
       * Create a request for the method "materias.create".
       *
       * This request holds the parameters needed by the the presente server.  After setting any
       * optional parameters, call the {@link Create#execute()} method to invoke the remote operation.
       * <p> {@link
       * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param content the {@link com.example.unknown.myapplication.backend.presente.model.Materia}
       * @since 1.13
       */
      protected Create(com.example.unknown.myapplication.backend.presente.model.Materia content) {
        super(Presente.this, "POST", REST_PATH, content, Void.class);
      }

      @Override
      public Create setAlt(java.lang.String alt) {
        return (Create) super.setAlt(alt);
      }

      @Override
      public Create setFields(java.lang.String fields) {
        return (Create) super.setFields(fields);
      }

      @Override
      public Create setKey(java.lang.String key) {
        return (Create) super.setKey(key);
      }

      @Override
      public Create setOauthToken(java.lang.String oauthToken) {
        return (Create) super.setOauthToken(oauthToken);
      }

      @Override
      public Create setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Create) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Create setQuotaUser(java.lang.String quotaUser) {
        return (Create) super.setQuotaUser(quotaUser);
      }

      @Override
      public Create setUserIp(java.lang.String userIp) {
        return (Create) super.setUserIp(userIp);
      }

      @Override
      public Create set(String parameterName, Object value) {
        return (Create) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "materias.list".
     *
     * This request holds the parameters needed by the presente server.  After setting any optional
     * parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @return the request
     */
    public List list() throws java.io.IOException {
      List result = new List();
      initialize(result);
      return result;
    }

    public class List extends PresenteRequest<com.example.unknown.myapplication.backend.presente.model.CollectionResponseMateria> {

      private static final String REST_PATH = "materias/list";

      /**
       * Create a request for the method "materias.list".
       *
       * This request holds the parameters needed by the the presente server.  After setting any
       * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
       * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @since 1.13
       */
      protected List() {
        super(Presente.this, "GET", REST_PATH, null, com.example.unknown.myapplication.backend.presente.model.CollectionResponseMateria.class);
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public List setAlt(java.lang.String alt) {
        return (List) super.setAlt(alt);
      }

      @Override
      public List setFields(java.lang.String fields) {
        return (List) super.setFields(fields);
      }

      @Override
      public List setKey(java.lang.String key) {
        return (List) super.setKey(key);
      }

      @Override
      public List setOauthToken(java.lang.String oauthToken) {
        return (List) super.setOauthToken(oauthToken);
      }

      @Override
      public List setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (List) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public List setQuotaUser(java.lang.String quotaUser) {
        return (List) super.setQuotaUser(quotaUser);
      }

      @Override
      public List setUserIp(java.lang.String userIp) {
        return (List) super.setUserIp(userIp);
      }

      @Override
      public List set(String parameterName, Object value) {
        return (List) super.set(parameterName, value);
      }
    }

    /**
     * An accessor for creating requests from the User collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code Presente presente = new Presente(...);}
     *   {@code Presente.User.List request = presente.user().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public User user() {
      return new User();
    }

    /**
     * The "user" collection of methods.
     */
    public class User {

      /**
       * Create a request for the method "user.create".
       *
       * This request holds the parameters needed by the presente server.  After setting any optional
       * parameters, call the {@link Create#execute()} method to invoke the remote operation.
       *
       * @param content the {@link com.example.unknown.myapplication.backend.presente.model.MateriaRelationUser}
       * @return the request
       */
      public Create create(com.example.unknown.myapplication.backend.presente.model.MateriaRelationUser content) throws java.io.IOException {
        Create result = new Create(content);
        initialize(result);
        return result;
      }

      public class Create extends PresenteRequest<Void> {

        private static final String REST_PATH = "materias/user/create";

        /**
         * Create a request for the method "user.create".
         *
         * This request holds the parameters needed by the the presente server.  After setting any
         * optional parameters, call the {@link Create#execute()} method to invoke the remote operation.
         * <p> {@link
         * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param content the {@link com.example.unknown.myapplication.backend.presente.model.MateriaRelationUser}
         * @since 1.13
         */
        protected Create(com.example.unknown.myapplication.backend.presente.model.MateriaRelationUser content) {
          super(Presente.this, "POST", REST_PATH, content, Void.class);
        }

        @Override
        public Create setAlt(java.lang.String alt) {
          return (Create) super.setAlt(alt);
        }

        @Override
        public Create setFields(java.lang.String fields) {
          return (Create) super.setFields(fields);
        }

        @Override
        public Create setKey(java.lang.String key) {
          return (Create) super.setKey(key);
        }

        @Override
        public Create setOauthToken(java.lang.String oauthToken) {
          return (Create) super.setOauthToken(oauthToken);
        }

        @Override
        public Create setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Create) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Create setQuotaUser(java.lang.String quotaUser) {
          return (Create) super.setQuotaUser(quotaUser);
        }

        @Override
        public Create setUserIp(java.lang.String userIp) {
          return (Create) super.setUserIp(userIp);
        }

        @Override
        public Create set(String parameterName, Object value) {
          return (Create) super.set(parameterName, value);
        }
      }
      /**
       * Create a request for the method "user.list".
       *
       * This request holds the parameters needed by the presente server.  After setting any optional
       * parameters, call the {@link List#execute()} method to invoke the remote operation.
       *
       * @return the request
       */
      public List list() throws java.io.IOException {
        List result = new List();
        initialize(result);
        return result;
      }

      public class List extends PresenteRequest<com.example.unknown.myapplication.backend.presente.model.CollectionResponseMateriaRelationUser> {

        private static final String REST_PATH = "materias/user/list";

        /**
         * Create a request for the method "user.list".
         *
         * This request holds the parameters needed by the the presente server.  After setting any
         * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
         * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @since 1.13
         */
        protected List() {
          super(Presente.this, "GET", REST_PATH, null, com.example.unknown.myapplication.backend.presente.model.CollectionResponseMateriaRelationUser.class);
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public List setAlt(java.lang.String alt) {
          return (List) super.setAlt(alt);
        }

        @Override
        public List setFields(java.lang.String fields) {
          return (List) super.setFields(fields);
        }

        @Override
        public List setKey(java.lang.String key) {
          return (List) super.setKey(key);
        }

        @Override
        public List setOauthToken(java.lang.String oauthToken) {
          return (List) super.setOauthToken(oauthToken);
        }

        @Override
        public List setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (List) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public List setQuotaUser(java.lang.String quotaUser) {
          return (List) super.setQuotaUser(quotaUser);
        }

        @Override
        public List setUserIp(java.lang.String userIp) {
          return (List) super.setUserIp(userIp);
        }

        @Override
        public List set(String parameterName, Object value) {
          return (List) super.set(parameterName, value);
        }
      }

    }
  }

  /**
   * An accessor for creating requests from the MessagingEndpoint collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Presente presente = new Presente(...);}
   *   {@code Presente.MessagingEndpoint.List request = presente.messagingEndpoint().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public MessagingEndpoint messagingEndpoint() {
    return new MessagingEndpoint();
  }

  /**
   * The "messagingEndpoint" collection of methods.
   */
  public class MessagingEndpoint {

    /**
     * Create a request for the method "messagingEndpoint.sendMessage".
     *
     * This request holds the parameters needed by the presente server.  After setting any optional
     * parameters, call the {@link SendMessage#execute()} method to invoke the remote operation.
     *
     * @param message
     * @return the request
     */
    public SendMessage sendMessage(java.lang.String message) throws java.io.IOException {
      SendMessage result = new SendMessage(message);
      initialize(result);
      return result;
    }

    public class SendMessage extends PresenteRequest<Void> {

      private static final String REST_PATH = "sendMessage/{message}";

      /**
       * Create a request for the method "messagingEndpoint.sendMessage".
       *
       * This request holds the parameters needed by the the presente server.  After setting any
       * optional parameters, call the {@link SendMessage#execute()} method to invoke the remote
       * operation. <p> {@link
       * SendMessage#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param message
       * @since 1.13
       */
      protected SendMessage(java.lang.String message) {
        super(Presente.this, "POST", REST_PATH, null, Void.class);
        this.message = com.google.api.client.util.Preconditions.checkNotNull(message, "Required parameter message must be specified.");
      }

      @Override
      public SendMessage setAlt(java.lang.String alt) {
        return (SendMessage) super.setAlt(alt);
      }

      @Override
      public SendMessage setFields(java.lang.String fields) {
        return (SendMessage) super.setFields(fields);
      }

      @Override
      public SendMessage setKey(java.lang.String key) {
        return (SendMessage) super.setKey(key);
      }

      @Override
      public SendMessage setOauthToken(java.lang.String oauthToken) {
        return (SendMessage) super.setOauthToken(oauthToken);
      }

      @Override
      public SendMessage setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (SendMessage) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public SendMessage setQuotaUser(java.lang.String quotaUser) {
        return (SendMessage) super.setQuotaUser(quotaUser);
      }

      @Override
      public SendMessage setUserIp(java.lang.String userIp) {
        return (SendMessage) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.String message;

      /**

       */
      public java.lang.String getMessage() {
        return message;
      }

      public SendMessage setMessage(java.lang.String message) {
        this.message = message;
        return this;
      }

      @Override
      public SendMessage set(String parameterName, Object value) {
        return (SendMessage) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Users collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Presente presente = new Presente(...);}
   *   {@code Presente.Users.List request = presente.users().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Users users() {
    return new Users();
  }

  /**
   * The "users" collection of methods.
   */
  public class Users {

    /**
     * Create a request for the method "users.create".
     *
     * This request holds the parameters needed by the presente server.  After setting any optional
     * parameters, call the {@link Create#execute()} method to invoke the remote operation.
     *
     * @param content the {@link com.example.unknown.myapplication.backend.presente.model.User}
     * @return the request
     */
    public Create create(com.example.unknown.myapplication.backend.presente.model.User content) throws java.io.IOException {
      Create result = new Create(content);
      initialize(result);
      return result;
    }

    public class Create extends PresenteRequest<Void> {

      private static final String REST_PATH = "users/create";

      /**
       * Create a request for the method "users.create".
       *
       * This request holds the parameters needed by the the presente server.  After setting any
       * optional parameters, call the {@link Create#execute()} method to invoke the remote operation.
       * <p> {@link
       * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param content the {@link com.example.unknown.myapplication.backend.presente.model.User}
       * @since 1.13
       */
      protected Create(com.example.unknown.myapplication.backend.presente.model.User content) {
        super(Presente.this, "POST", REST_PATH, content, Void.class);
      }

      @Override
      public Create setAlt(java.lang.String alt) {
        return (Create) super.setAlt(alt);
      }

      @Override
      public Create setFields(java.lang.String fields) {
        return (Create) super.setFields(fields);
      }

      @Override
      public Create setKey(java.lang.String key) {
        return (Create) super.setKey(key);
      }

      @Override
      public Create setOauthToken(java.lang.String oauthToken) {
        return (Create) super.setOauthToken(oauthToken);
      }

      @Override
      public Create setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Create) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Create setQuotaUser(java.lang.String quotaUser) {
        return (Create) super.setQuotaUser(quotaUser);
      }

      @Override
      public Create setUserIp(java.lang.String userIp) {
        return (Create) super.setUserIp(userIp);
      }

      @Override
      public Create set(String parameterName, Object value) {
        return (Create) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "users.get".
     *
     * This request holds the parameters needed by the presente server.  After setting any optional
     * parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @param deviceSerial
     * @param matricula
     * @param name
     * @return the request
     */
    public Get get(java.lang.String deviceSerial, java.lang.Long matricula, java.lang.String name) throws java.io.IOException {
      Get result = new Get(deviceSerial, matricula, name);
      initialize(result);
      return result;
    }

    public class Get extends PresenteRequest<com.example.unknown.myapplication.backend.presente.model.CollectionResponseUser> {

      private static final String REST_PATH = "users/get";

      /**
       * Create a request for the method "users.get".
       *
       * This request holds the parameters needed by the the presente server.  After setting any
       * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
       * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param deviceSerial
       * @param matricula
       * @param name
       * @since 1.13
       */
      protected Get(java.lang.String deviceSerial, java.lang.Long matricula, java.lang.String name) {
        super(Presente.this, "GET", REST_PATH, null, com.example.unknown.myapplication.backend.presente.model.CollectionResponseUser.class);
        this.deviceSerial = com.google.api.client.util.Preconditions.checkNotNull(deviceSerial, "Required parameter deviceSerial must be specified.");
        this.matricula = com.google.api.client.util.Preconditions.checkNotNull(matricula, "Required parameter matricula must be specified.");
        this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Get setAlt(java.lang.String alt) {
        return (Get) super.setAlt(alt);
      }

      @Override
      public Get setFields(java.lang.String fields) {
        return (Get) super.setFields(fields);
      }

      @Override
      public Get setKey(java.lang.String key) {
        return (Get) super.setKey(key);
      }

      @Override
      public Get setOauthToken(java.lang.String oauthToken) {
        return (Get) super.setOauthToken(oauthToken);
      }

      @Override
      public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Get) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Get setQuotaUser(java.lang.String quotaUser) {
        return (Get) super.setQuotaUser(quotaUser);
      }

      @Override
      public Get setUserIp(java.lang.String userIp) {
        return (Get) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.String deviceSerial;

      /**

       */
      public java.lang.String getDeviceSerial() {
        return deviceSerial;
      }

      public Get setDeviceSerial(java.lang.String deviceSerial) {
        this.deviceSerial = deviceSerial;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.Long matricula;

      /**

       */
      public java.lang.Long getMatricula() {
        return matricula;
      }

      public Get setMatricula(java.lang.Long matricula) {
        this.matricula = matricula;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String name;

      /**

       */
      public java.lang.String getName() {
        return name;
      }

      public Get setName(java.lang.String name) {
        this.name = name;
        return this;
      }

      @Override
      public Get set(String parameterName, Object value) {
        return (Get) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "users.list".
     *
     * This request holds the parameters needed by the presente server.  After setting any optional
     * parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @return the request
     */
    public List list() throws java.io.IOException {
      List result = new List();
      initialize(result);
      return result;
    }

    public class List extends PresenteRequest<com.example.unknown.myapplication.backend.presente.model.CollectionResponseUser> {

      private static final String REST_PATH = "users/list";

      /**
       * Create a request for the method "users.list".
       *
       * This request holds the parameters needed by the the presente server.  After setting any
       * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
       * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @since 1.13
       */
      protected List() {
        super(Presente.this, "GET", REST_PATH, null, com.example.unknown.myapplication.backend.presente.model.CollectionResponseUser.class);
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public List setAlt(java.lang.String alt) {
        return (List) super.setAlt(alt);
      }

      @Override
      public List setFields(java.lang.String fields) {
        return (List) super.setFields(fields);
      }

      @Override
      public List setKey(java.lang.String key) {
        return (List) super.setKey(key);
      }

      @Override
      public List setOauthToken(java.lang.String oauthToken) {
        return (List) super.setOauthToken(oauthToken);
      }

      @Override
      public List setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (List) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public List setQuotaUser(java.lang.String quotaUser) {
        return (List) super.setQuotaUser(quotaUser);
      }

      @Override
      public List setUserIp(java.lang.String userIp) {
        return (List) super.setUserIp(userIp);
      }

      @Override
      public List set(String parameterName, Object value) {
        return (List) super.set(parameterName, value);
      }
    }

    /**
     * An accessor for creating requests from the Materia collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code Presente presente = new Presente(...);}
     *   {@code Presente.Materia.List request = presente.materia().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public Materia materia() {
      return new Materia();
    }

    /**
     * The "materia" collection of methods.
     */
    public class Materia {

      /**
       * Create a request for the method "materia.get".
       *
       * This request holds the parameters needed by the presente server.  After setting any optional
       * parameters, call the {@link Get#execute()} method to invoke the remote operation.
       *
       * @param materia
       * @return the request
       */
      public Get get(java.lang.Long materia) throws java.io.IOException {
        Get result = new Get(materia);
        initialize(result);
        return result;
      }

      public class Get extends PresenteRequest<com.example.unknown.myapplication.backend.presente.model.CollectionResponseUser> {

        private static final String REST_PATH = "users/materias/get";

        /**
         * Create a request for the method "materia.get".
         *
         * This request holds the parameters needed by the the presente server.  After setting any
         * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
         * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param materia
         * @since 1.13
         */
        protected Get(java.lang.Long materia) {
          super(Presente.this, "GET", REST_PATH, null, com.example.unknown.myapplication.backend.presente.model.CollectionResponseUser.class);
          this.materia = com.google.api.client.util.Preconditions.checkNotNull(materia, "Required parameter materia must be specified.");
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public Get setAlt(java.lang.String alt) {
          return (Get) super.setAlt(alt);
        }

        @Override
        public Get setFields(java.lang.String fields) {
          return (Get) super.setFields(fields);
        }

        @Override
        public Get setKey(java.lang.String key) {
          return (Get) super.setKey(key);
        }

        @Override
        public Get setOauthToken(java.lang.String oauthToken) {
          return (Get) super.setOauthToken(oauthToken);
        }

        @Override
        public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Get) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Get setQuotaUser(java.lang.String quotaUser) {
          return (Get) super.setQuotaUser(quotaUser);
        }

        @Override
        public Get setUserIp(java.lang.String userIp) {
          return (Get) super.setUserIp(userIp);
        }

        @com.google.api.client.util.Key
        private java.lang.Long materia;

        /**

         */
        public java.lang.Long getMateria() {
          return materia;
        }

        public Get setMateria(java.lang.Long materia) {
          this.materia = materia;
          return this;
        }

        @Override
        public Get set(String parameterName, Object value) {
          return (Get) super.set(parameterName, value);
        }
      }

    }
  }

  /**
   * Create a request for the method "listDevices".
   *
   * This request holds the parameters needed by the presente server.  After setting any optional
   * parameters, call the {@link ListDevices#execute()} method to invoke the remote operation.
   *
   * @param count
   * @return the request
   */
  public ListDevices listDevices(java.lang.Integer count) throws java.io.IOException {
    ListDevices result = new ListDevices(count);
    initialize(result);
    return result;
  }

  public class ListDevices extends PresenteRequest<com.example.unknown.myapplication.backend.presente.model.CollectionResponseRegistrationRecord> {

    private static final String REST_PATH = "registrationrecord/{count}";

    /**
     * Create a request for the method "listDevices".
     *
     * This request holds the parameters needed by the the presente server.  After setting any
     * optional parameters, call the {@link ListDevices#execute()} method to invoke the remote
     * operation. <p> {@link
     * ListDevices#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param count
     * @since 1.13
     */
    protected ListDevices(java.lang.Integer count) {
      super(Presente.this, "GET", REST_PATH, null, com.example.unknown.myapplication.backend.presente.model.CollectionResponseRegistrationRecord.class);
      this.count = com.google.api.client.util.Preconditions.checkNotNull(count, "Required parameter count must be specified.");
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public ListDevices setAlt(java.lang.String alt) {
      return (ListDevices) super.setAlt(alt);
    }

    @Override
    public ListDevices setFields(java.lang.String fields) {
      return (ListDevices) super.setFields(fields);
    }

    @Override
    public ListDevices setKey(java.lang.String key) {
      return (ListDevices) super.setKey(key);
    }

    @Override
    public ListDevices setOauthToken(java.lang.String oauthToken) {
      return (ListDevices) super.setOauthToken(oauthToken);
    }

    @Override
    public ListDevices setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (ListDevices) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public ListDevices setQuotaUser(java.lang.String quotaUser) {
      return (ListDevices) super.setQuotaUser(quotaUser);
    }

    @Override
    public ListDevices setUserIp(java.lang.String userIp) {
      return (ListDevices) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.Integer count;

    /**

     */
    public java.lang.Integer getCount() {
      return count;
    }

    public ListDevices setCount(java.lang.Integer count) {
      this.count = count;
      return this;
    }

    @Override
    public ListDevices set(String parameterName, Object value) {
      return (ListDevices) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "register".
   *
   * This request holds the parameters needed by the presente server.  After setting any optional
   * parameters, call the {@link Register#execute()} method to invoke the remote operation.
   *
   * @param regId
   * @return the request
   */
  public Register register(java.lang.String regId) throws java.io.IOException {
    Register result = new Register(regId);
    initialize(result);
    return result;
  }

  public class Register extends PresenteRequest<Void> {

    private static final String REST_PATH = "registerDevice/{regId}";

    /**
     * Create a request for the method "register".
     *
     * This request holds the parameters needed by the the presente server.  After setting any
     * optional parameters, call the {@link Register#execute()} method to invoke the remote operation.
     * <p> {@link
     * Register#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param regId
     * @since 1.13
     */
    protected Register(java.lang.String regId) {
      super(Presente.this, "POST", REST_PATH, null, Void.class);
      this.regId = com.google.api.client.util.Preconditions.checkNotNull(regId, "Required parameter regId must be specified.");
    }

    @Override
    public Register setAlt(java.lang.String alt) {
      return (Register) super.setAlt(alt);
    }

    @Override
    public Register setFields(java.lang.String fields) {
      return (Register) super.setFields(fields);
    }

    @Override
    public Register setKey(java.lang.String key) {
      return (Register) super.setKey(key);
    }

    @Override
    public Register setOauthToken(java.lang.String oauthToken) {
      return (Register) super.setOauthToken(oauthToken);
    }

    @Override
    public Register setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (Register) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public Register setQuotaUser(java.lang.String quotaUser) {
      return (Register) super.setQuotaUser(quotaUser);
    }

    @Override
    public Register setUserIp(java.lang.String userIp) {
      return (Register) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String regId;

    /**

     */
    public java.lang.String getRegId() {
      return regId;
    }

    public Register setRegId(java.lang.String regId) {
      this.regId = regId;
      return this;
    }

    @Override
    public Register set(String parameterName, Object value) {
      return (Register) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "unregister".
   *
   * This request holds the parameters needed by the presente server.  After setting any optional
   * parameters, call the {@link Unregister#execute()} method to invoke the remote operation.
   *
   * @param regId
   * @return the request
   */
  public Unregister unregister(java.lang.String regId) throws java.io.IOException {
    Unregister result = new Unregister(regId);
    initialize(result);
    return result;
  }

  public class Unregister extends PresenteRequest<Void> {

    private static final String REST_PATH = "unregisterDevice/{regId}";

    /**
     * Create a request for the method "unregister".
     *
     * This request holds the parameters needed by the the presente server.  After setting any
     * optional parameters, call the {@link Unregister#execute()} method to invoke the remote
     * operation. <p> {@link
     * Unregister#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param regId
     * @since 1.13
     */
    protected Unregister(java.lang.String regId) {
      super(Presente.this, "POST", REST_PATH, null, Void.class);
      this.regId = com.google.api.client.util.Preconditions.checkNotNull(regId, "Required parameter regId must be specified.");
    }

    @Override
    public Unregister setAlt(java.lang.String alt) {
      return (Unregister) super.setAlt(alt);
    }

    @Override
    public Unregister setFields(java.lang.String fields) {
      return (Unregister) super.setFields(fields);
    }

    @Override
    public Unregister setKey(java.lang.String key) {
      return (Unregister) super.setKey(key);
    }

    @Override
    public Unregister setOauthToken(java.lang.String oauthToken) {
      return (Unregister) super.setOauthToken(oauthToken);
    }

    @Override
    public Unregister setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (Unregister) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public Unregister setQuotaUser(java.lang.String quotaUser) {
      return (Unregister) super.setQuotaUser(quotaUser);
    }

    @Override
    public Unregister setUserIp(java.lang.String userIp) {
      return (Unregister) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String regId;

    /**

     */
    public java.lang.String getRegId() {
      return regId;
    }

    public Unregister setRegId(java.lang.String regId) {
      this.regId = regId;
      return this;
    }

    @Override
    public Unregister set(String parameterName, Object value) {
      return (Unregister) super.set(parameterName, value);
    }
  }

  /**
   * Builder for {@link Presente}.
   *
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static final class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

    /**
     * Returns an instance of a new builder.
     *
     * @param transport HTTP transport, which should normally be:
     *        <ul>
     *        <li>Google App Engine:
     *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *        <li>Android: {@code newCompatibleTransport} from
     *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *        </li>
     *        </ul>
     * @param jsonFactory JSON factory, which may be:
     *        <ul>
     *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *        <li>Android Honeycomb or higher:
     *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *        </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
        com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      super(
          transport,
          jsonFactory,
          DEFAULT_ROOT_URL,
          DEFAULT_SERVICE_PATH,
          httpRequestInitializer,
          false);
      setBatchPath(DEFAULT_BATCH_PATH);
    }

    /** Builds a new instance of {@link Presente}. */
    @Override
    public Presente build() {
      return new Presente(this);
    }

    @Override
    public Builder setRootUrl(String rootUrl) {
      return (Builder) super.setRootUrl(rootUrl);
    }

    @Override
    public Builder setServicePath(String servicePath) {
      return (Builder) super.setServicePath(servicePath);
    }

    @Override
    public Builder setBatchPath(String batchPath) {
      return (Builder) super.setBatchPath(batchPath);
    }

    @Override
    public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      return (Builder) super.setApplicationName(applicationName);
    }

    @Override
    public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
      return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
    }

    @Override
    public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
      return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
    }

    @Override
    public Builder setSuppressAllChecks(boolean suppressAllChecks) {
      return (Builder) super.setSuppressAllChecks(suppressAllChecks);
    }

    /**
     * Set the {@link PresenteRequestInitializer}.
     *
     * @since 1.12
     */
    public Builder setPresenteRequestInitializer(
        PresenteRequestInitializer presenteRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(presenteRequestInitializer);
    }

    @Override
    public Builder setGoogleClientRequestInitializer(
        com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
    }
  }
}
